
"options {{{

" environment {{{

" support XDG
set undodir=$XDG_CACHE_HOME/vim
set directory=$XDG_CACHE_HOME/vim
set backupdir=$XDG_CACHE_HOME/vim
set viminfo+='1000,n$XDG_CACHE_HOME/vim/viminfo
set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME

let $MYVIMRC = $XDG_CONFIG_HOME . '/vim/vimrc'
let g:netrw_home = $XDG_CACHE_HOME . '/vim'

" vim-racer
let g:racer_cmd = $CARGO_HOME . '/bin/racer'
let g:racer_experimental_completer = 1

" buftabline
let g:buftabline_numbers = 2
let g:buftabline_indicators = 1
let g:buftabline_separators = 0

" }}}

"エンコード、テキスト種別" {{{

set encoding=utf-8
set fileformats=unix,dos
set fileencodings=iso-2022-jp,euc-jp,sjis,utf-8

" }}}

"見た目" {{{

" フォント
if has('gui_running')
	set guifont=Ricty_Diminished:h10
	set guifontwide=Ricty_Diminished:h10
endif

" Width Class Ambiguous is twice the width of ASCII characters.
set ambiwidth=double

" 行数表示
set number

" 検索時ハイライト
set hlsearch

" カーソルがある行のライン非表示
set nocursorline

" タブ幅 4 文字
set tabstop=4

" 不可視文字を表示
set list

" 不可視文字の表示記号
set listchars=tab:.\ ,trail:-,eol:~,extends:>,precedes:<,nbsp:%

" 折り返し
set nowrap

" }}}

"statusline {{{

" ファイル名表示
set statusline=%F

" 変更チェック表示
set statusline+=%m

" 読み込み専用かどうか表示
set statusline+=%r

" ヘルプページなら[HELP]と表示
set statusline+=%h

" プレビューウインドウなら[Prevew]と表示
set statusline+=%w

" これ以降は右寄せ表示
set statusline+=%=

" ファイルフォーマット
set statusline+=[FF=%{&fileformat}]

" ファイルエンコード
set statusline+=[FENC=%{&fileencoding}]

" 現在行数/全行数
set statusline+=[LOW=%l/%L]

" ステータスラインを常に表示(0:表示しない、1:2つ以上ウィンドウがある時だけ表示)
set laststatus=2

" }}}

"tabline {{{

" show tabline when one tab is open.
set showtabline=2

" }}}

"開発関連" {{{

" タグファイルの検索方法
set clipboard+=unnamed

" search tag file in previous directory recusively.
set tags=./tags;

" C インデント
set cindent

" 自動インデントでずれる幅
set shiftwidth=4

" バッファ内検索
set ignorecase
set smartcase

" open file
set hidden

" }}}

" }}}

"map {{{

" ***************************
" * standard command keymap *
" ***************************
" select all
nnoremap <C-A> ggVG

" yank
vnoremap <C-C> y

" buffer
nnoremap <C-N> :bnext<CR>
nnoremap <C-P> :bprev<CR>

" tag jump
nmap <C-]> <C-]>zz
nmap <C-T> <C-T>zz

" search
nmap n nzz

" refresh global reference
noremap <F5> :!gtags<CR>

" ESC disable IME
inoremap <ESC> <ESC>:set iminsert=0<CR>

" windows とのクリップボード共有コピー
if has('win32unix')
  vnoremap "*y :'<,'>w !cat > /dev/clipboard
endif

let mapleader = ","
nmap <Leader>g \grep\
nmap <Leader>q \quickfix\
nmap <Leader>b \buffer\

" grep
noremap \grep\g :vimgrep /<C-r><C-w>/ **/* \| cwin<CR>
noremap \grep\G :Grep<Space>

" quickfix
noremap \quickfix\o :copen<CR>
noremap \quickfix\c :cclose<CR>
noremap \quickfix\w :cwindow<CR>
noremap \quickfix\b :cbottom<CR>
noremap \quickfix\n :cnext<CR>
noremap \quickfix\p :cprevious<CR>
noremap \quickfix\N :cNext<CR>

" buffer
noremap \buffer\n :bnext<CR>
noremap \buffer\p :bprev<CR>
noremap \buffer\d :bdelete<CR>


" *************************
" * plugin command keymap *
" *************************

let mapleader = "\<Space>"
nmap <Leader>h \quickhl\
vmap <Leader>h \quickhl\
nmap <Leader>b \buftab\
nmap <Leader>j \gtags\

" vim-quickhl
nmap \quickhl\m <Plug>(quickhl-manual-this)
xmap \quickhl\m <Plug>(quickhl-manual-this)
nmap \quickhl\w <Plug>(quickhl-manual-this-whole-word)
xmap \quickhl\w <Plug>(quickhl-manual-this-whole-word)
nmap \quickhl\c <Plug>(quickhl-manual-clear)
vmap \quickhl\c <Plug>(quickhl-manual-clear)
nmap \quickhl\M <Plug>(quickhl-manual-reset)
xmap \quickhl\M <Plug>(quickhl-manual-reset)
nmap \quickhl\j <Plug>(quickhl-cword-toggle)
nmap \quickhl\] <Plug>(quickhl-tag-toggle)

" vim-buftabline
nmap \buftab\1 <Plug>BufTabLine.Go(1)
nmap \buftab\2 <Plug>BufTabLine.Go(2)
nmap \buftab\3 <Plug>BufTabLine.Go(3)
nmap \buftab\4 <Plug>BufTabLine.Go(4)
nmap \buftab\5 <Plug>BufTabLine.Go(5)
nmap \buftab\6 <Plug>BufTabLine.Go(6)
nmap \buftab\7 <Plug>BufTabLine.Go(7)
nmap \buftab\8 <Plug>BufTabLine.Go(8)
nmap \buftab\9 <Plug>BufTabLine.Go(9)
nmap \buftab\0 <Plug>BufTabLine.Go(10)

" gtags
nmap \gtags\t :Gtags <C-r><C-w><CR>
nmap \gtags\T :Gtags<Space>
nmap \gtags\r :Gtags -r <C-r><C-w><CR>
nmap \gtags\R :Gtags -r<Space>
nmap \gtags\s :Gtags -s <C-r><C-w><CR>
nmap \gtags\S :Gtags -s<Space>
nmap \gtags\g :Gtags -g <C-r><C-w><CR>
nmap \gtags\G :Gtags -g<Space>
nmap \gtags\f :Gtags -f %<CR>
nmap \gtags\F :Gtags -f<Space>
nmap \gtags\j :GtagsCursor<CR>

" }}}

"cmdline {{{

" edit and reload vimrc
command! Evim edit $MYVIMRC
command! Svim split $MYVIMRC
command! Tvim $tabedit $MYVIMRC
command! Rvim source $MYVIMRC

" grep into current directory.
command! -complete=file -nargs=+ Grep call s:grep([<f-args>])
function! s:grep(args)
    let target = len(a:args) > 1 ? join(a:args[1:]) : '**/*'
    execute 'vimgrep' '/' . a:args[0] . '/j ' . target
    if len(getqflist()) != 0 | copen | endif
endfunction

" }}}

"autocmd {{{

" vim
autocmd FileType vim setlocal foldmethod=marker

" rust
autocmd FileType rust nmap gd <Plug>(rust-def)
autocmd FileType rust nmap gs <Plug>(rust-def-split)
autocmd FileType rust nmap gx <Plug>(rust-def-vertical)
autocmd FileType rust nmap <leader>gd <Plug>(rust-doc)

" 行末ブランクをハイライトする
augroup HighlightTrailingSpaces
	autocmd!
	autocmd VimEnter,WinEnter,ColorScheme * highlight TrailingSpaces term=underline guibg=DarkRed ctermbg=DarkRed
	autocmd VimEnter,WinEnter * match TrailingSpaces /\s\+$/
augroup END

" Quickfix
augroup qf
	autocmd!
	autocmd QuickFixCmdPost grep,grepadd,vimgrep,vimgrepadd,cscope cwindow
augroup END

" }}}

"syntax {{{

" syntax highlight
syntax on
colorscheme desert

" }}}

"plugin {{{

call plug#begin( "$XDG_CONFIG_HOME/vim" . '/plugged')

Plug 'tpope/vim-unimpaired'
Plug 'ap/vim-buftabline'
Plug 't9md/vim-quickhl'
Plug 'vim-scripts/gtags.vim'
Plug 'rust-lang/rust.vim'
Plug 'racer-rust/vim-racer'
Plug 'mechatroner/rainbow_csv'

call plug#end()

" }}}

