
"options {{{

" environment {{{

" support XDG
set undodir=$XDG_CACHE_HOME/vim
set directory=$XDG_CACHE_HOME/vim
set backupdir=$XDG_CACHE_HOME/vim
set viminfo+='1000,n$XDG_CACHE_HOME/vim/viminfo
set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME

let $MYVIMRC = $XDG_CONFIG_HOME . "/vim/vimrc"
let g:netrw_home = $XDG_CACHE_HOME . "/vim"

" }}}

"エンコード、テキスト種別" {{{

set encoding=utf-8
set fileformats=unix,dos
set fileencodings=iso-2022-jp,euc-jp,sjis,utf-8

" }}}

"見た目" {{{

" フォント
if has('gui_running')
	set guifont=Ricty_Diminished:h10
	set guifontwide=Ricty_Diminished:h10
endif

" Width Class Ambiguous is twice the width of ASCII characters.
set ambiwidth=double

" 行数表示
set number

" 検索時ハイライト
set hlsearch

" カーソルがある行のライン非表示
set nocursorline

" タブ幅 4 文字
set tabstop=4

" 不可視文字を表示
set list

" 不可視文字の表示記号
set listchars=tab:>-,trail:-,eol:~,extends:>,precedes:<,nbsp:%

" 折り返し
set nowrap

" }}}

"statusline {{{

" ファイル名表示
set statusline=%F

" 変更チェック表示
set statusline+=%m

" 読み込み専用かどうか表示
set statusline+=%r

" ヘルプページなら[HELP]と表示
set statusline+=%h

" プレビューウインドウなら[Prevew]と表示
set statusline+=%w

" これ以降は右寄せ表示
set statusline+=%=

" ファイルフォーマット
set statusline+=[FF=%{&fileformat}]

" ファイルエンコード
set statusline+=[FENC=%{&fileencoding}]

" 現在行数/全行数
set statusline+=[LOW=%l/%L]

" ステータスラインを常に表示(0:表示しない、1:2つ以上ウィンドウがある時だけ表示)
set laststatus=2

" }}}

"tabline {{{

" show tabline when one tab is open.
set showtabline=2

" }}}

"開発関連" {{{

" タグファイルの検索方法
set clipboard+=unnamed

" search tag file in previous directory recusively.
set tags=./tags;

" C インデント
set cindent

" 自動インデントでずれる幅
set shiftwidth=4

" バッファ内検索
set ignorecase
set smartcase

" cscope
if has("cscope")
	set csprg=cscope
	set csto=0
	set cst
	set csqf=s-,c-,d-,i-,t-,e-

	" add any database in current directory
	set nocsverb

	if filereadable("cscope.out")
		cs add cscope.out
	elseif $CSCOPE_DB != ""
		cs add $CSCOPE_DB
	endif

	set csverb
endif

" }}}

" }}}

"map {{{

let mapleader = "\<Space>"

nmap <Leader>g [grep]
nmap <Leader>c [cscope]
nmap <Leader>h [highlight]

" grep
noremap [grep]g :vimgrep /<C-r><C-w>/ **/* \| cwin<CR>
noremap [grep]G :Grep 

" windows とのクリップボード共有コピー
if has('win32unix')
  vnoremap "*y :'<,'>w !cat > /dev/clipboard
endif

" cscope
noremap [cscope]s :cs find s <C-R>=expand("<cword>")<CR><CR>:cwin<CR>
noremap [cscope]g :cs find g <C-R>=expand("<cword>")<CR><CR>:cwin<CR>
noremap [cscope]c :cs find c <C-R>=expand("<cword>")<CR><CR>:cwin<CR>
noremap [cscope]t :cs find t <C-R>=expand("<cword>")<CR><CR>:cwin<CR>
noremap [cscope]e :cs find e <C-R>=expand("<cword>")<CR><CR>:cwin<CR>
noremap [cscope]f :cs find f <C-R>=expand("<cfile>")<CR><CR>:cwin<CR>
noremap [cscope]i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>:cwin<CR>
noremap [cscope]d :cs find d <C-R>=expand("<cword>")<CR><CR>:cwin<CR>

" refresh cscope db
noremap <F5> :cs kill cscope.out<CR>:!cscope -Rb<CR>:cs add cscope.out<CR>

" ESC disable IME
inoremap <ESC> <ESC>:set iminsert=0<CR>

" highlight
nmap [highlight]m <Plug>(quickhl-manual-this)
xmap [highlight]m <Plug>(quickhl-manual-this)

nmap [highlight]w <Plug>(quickhl-manual-this-whole-word)
xmap [highlight]w <Plug>(quickhl-manual-this-whole-word)

nmap [highlight]c <Plug>(quickhl-manual-clear)
vmap [highlight]c <Plug>(quickhl-manual-clear)

nmap [highlight]M <Plug>(quickhl-manual-reset)
xmap [highlight]M <Plug>(quickhl-manual-reset)

nmap [highlight]j <Plug>(quickhl-cword-toggle)
nmap [highlight]] <Plug>(quickhl-tag-toggle)

" }}}

"cmdline {{{

" Open Current Directory
command Edir edit .
command Sdir split .
command Tdir $tabedit .

" edit and reload vimrc
command Evim edit $MYVIMRC
command Svim split $MYVIMRC
command Tvim $tabedit $MYVIMRC
command Rvim source $MYVIMRC

" grep into current directory.
command -complete=file -nargs=+ Grep call s:grep([<f-args>])
function! s:grep(args)
    let target = len(a:args) > 1 ? join(a:args[1:]) : '**/*'
    execute 'vimgrep' '/' . a:args[0] . '/j ' . target
    if len(getqflist()) != 0 | copen | endif
endfunction

" }}}

"autocmd {{{

" vim ファイルの折畳みコメント有効
autocmd FileType vim setlocal foldmethod=marker

" 行末ブランクをハイライトする
augroup HighlightTrailingSpaces
  autocmd!
  autocmd VimEnter,WinEnter,ColorScheme * highlight TrailingSpaces term=underline guibg=Red ctermbg=Red
  autocmd VimEnter,WinEnter * match TrailingSpaces /\s\+$/
augroup END

" color scheme
autocmd ColorScheme * highlight Comment ctermfg=DarkGray guifg=DarkGray
autocmd ColorScheme * highlight SpecialKey ctermfg=DarkGray guifg=DarkGray

" }}}

"syntax {{{

" syntax highlight
syntax on
colorscheme desert

" }}}

"plugin {{{

call plug#begin( "$XDG_CONFIG_HOME/vim" . '/plugged')

Plug 't9md/vim-quickhl'

call plug#end()

" }}}

